-------------------------------------MAKE-------------------------------------

• Add -k when running make to continue running even in the face of errors and it wont build targets in which dependencies got errored while making - like the whole branch gets non built
• Add -i when running make to ignore errors all of them and still do everything
• -B, --always-make {Unconditionally make all targets}
• -n {Print the commands that would be executed, but do not execute them (except in certain circumstances)}
• Add a - before a command to suppress the error
• Add a @ before a command to not print the command
• Tries the following names in order: 'GNUmakefile', 'makefile' and 'Makefile'
• Use a different name, use make -f
• $@ is an automatic variable that contains the target name
• $<: Represents the first prerequisite (dependency) of the rule.
• $^: Represents all prerequisites (dependencies) of the rule
• $?: Outputs all prerequisites newer than the target
• $*: Stem in a static pattern
• $() or ${}: variable substitution
• $$(): command substitution to execute shell commands

• SRC1   := $(wildcard src/src1/*.cpp)
  OBJS_1   := $(patsubst src/src1/%.cpp,%.o,$(SRC1))

• SRCS := main.cpp foo.cpp bar.cpp
  OBJS := $(SRCS:.cpp=.o)

• objable = $(shell grep -L "main" $(alll))
  executableable = $(filter-out $(objable), $(alll))

• .PHONY : clean
  clean:
	rm -f $(OBJS) $(MAINS)

-------------------------------------GDB-------------------------------------

• g++ myprogram.cpp 2>&1 | tee compilation.log - This way you can see errors in compilation and get them into a file also
• ASSERT : Usage: You write assert(expression);. If the expression evaluates to false, assert will:
Print an error message (including the file name and line number).
Call abort(), terminating the program.
Release Mode: When the NDEBUG macro is defined (commonly in release builds), all assert calls are disabled, so they don't affect performance or behavior.
• How to use gdb? - Compile your program with the -g compiler (g++ -g -o broken broken.cpp)
• If you put a breakpoint in a line it stops before that line
• If you put a breakpoint for a function it stops just before the first line of that function
• continue: continue to the next breakpoint
• up, down: function stack
• Examples
	break bug.c:Compute(int) - Puts a breakpoint for function named Compute in a file named bug.c which takes int args
	break 26 - Puts a breakpoint at line 26
	info breakpoints - Gives information of all the break points
	delete 2 - Delete breakpoint numbered 2
	break 23 if i == count - 1  - puts breakpoint only if the condition evaluates to true
	print n - Prints value of n
	print buffer[0] = 'Z' - Changes first char of buffer to 'Z'
	info args - Gives info of all the args when you are in a function
	info locals - Gives info of all the local vars
	list - Shows 5 lines of code above and below where you are rn
	list bug.C:1 - Shows 5 lines of code above and below 1rst line of bug.c.
	step - Steps into the function one line at a time - If you at a line with a function call in it step goes into the function and then step consecutively moves one line by line
	next - Steps over the function ie executes the function and stops after it is done executing - In the above example it gets done with the function and stops after the function is done
	display x - Displays the value of x now and every time it stops
	backtrace - Shows the function call stack with their args ie what args they were called with
	up - Moves up the function stack
	down - Moves down the function stack
• Shortcuts
	break - b
	next - n
	backtrace - bt
	print - p

-------------------------------------Profiling-------------------------------------

• Profilers allow us to examine the program's overall use of system resources– focused primarily on memory use and cpu 
consumption– Can determine parts of code that are time consuming and need to be re-written for faster execution
• g++ -pg -o profile profile.cpp
• ./profile - Generates gmon.out (a binary file) {If gmon.out already exists, it will be overwritten}
  gprof profile gmon.out > analysis.txt
• Analyzing the output
	Flat profile: shows the total amount of time your program spent executing each function
	Call graph: shows how much time was spent in each function and its children can find functions that, they themselves may not have used much time, but called other functions that did!

-------------------------------------UNIX-------------------------------------

• ls : -a,-l,-R(Recursive listing of subdirs),-t(Sort by last mod time),-S(sort by size)
• mkdir : -p(creates parent dirs. if not present and wont cry if the dir is already present),-v(verbose)
• rmdir : removes only if empty : -p(removes dir and parent dir if empty),-v(verbose)
• cp : Automatically takes last arg as final dir location or file name if only 2 args : -i(prompts before overwriting/interactive),-r(recursive copy ie dir and subdirs),-v(verbose)
• mv : -i(interactive),-n(if file already there it skips the file)
• rm : -r,-f,-d(removes empty dirs like rmdir),-i(interactive)
• echo : -n(omits a trailing new line),-e(recognizes backslash-escaped characters)
• touch : create or update timestamp :  -a(updates only the access timestamp),-m(updates only the modification timestamp),-t(specify timestamp)
• stat : Display status of a file(shows size, Permissions and access, modify, change, birth time)
• cat : -v(shows non-printable characters as \smth(excluding tabs and newlines)),-n(numbers output lines including blank ones),-s(show consecutive repeated empty lines as a single one),-b(numbers only non-empty lines)
• less : view file contents one screen at a time(does not load entire file) : -N(displays line numbers),-i(makes search case-insensitive)
• more : veiw files page by page : more +12 less.cpp(starts at 12th line),-12(for ends at 12th line)
• head : first 10 lines : -n(how many lines to print)
• tail : same as head, tail -n +4 file.txt {shows from line 4 to end of file}
• wc : can use for multiple files : can use for multiple -w(words),-m(chars),-l(line),-c(bytes)
• grep : -E(extended regex),-i(ignore case),grep "cried|could"(seaarches for literal cried|could),grep "cried\|could" bigfile(searches for cried or could),-v(invert match),-r/R(recursive if you send file names instead of word (by pipe) and want to search files use -r), -n (show line numbers with matching lines),-c(count the number of matching line),-o(print only the matched parts of a line),-w(match only whole words), -l(display only the filenames that contain the matching pattern, without showing the matching lines)
• find : -type(search by type),-type f(files),-type d(dirs),-name(search by name),-iname(case insensitive search),-size +60k,-perm 644,find dir1/ -name "f*" -delete,
• basename : removes the dir from path and only gives the file name and not the whole path {basename /home/fuckyou/suhas.cpp gives suhas.cpp}SSSS
• cut : -f(feilds),-d(delimiter),--output-delimiter=" "
• paste : -d(specify a delimiter),-s(pastes one file at a time in serial)
• sort : -r(reverse),-n(numeric sort),sort -t ',' -k8 students.csv(sort based on 8th coloumn and everything after of students.csv with delimeter as ",")
• uniq : Only works on adjacent lines(identifies or removes duplicates that are directly next to each other),uniq [OPTIONS] [INPUTFILE] [OUTPUTFILE](if inout or output is not gives from/to std)
• zip : -r(recursively include directories and their contents),-e(encrypt the archive with a password)
• unzip : -l(list the contents of the archive without extracting)
• tar : Preserves file metadata like permissions,ownership,timestamps : -z(compress using gzip),-c(create new archive),-x(extract files),-v(verbose),-t(list without extracting),-f(specify archive name)
• > : overwrite, >> : append, < : redirection, 1> : sends output, 2> : sends error, 
• ./commands.sh > out 2>&1
• > : sends stream output1 by default
• /dev/null
• $() or ` `
• Process management : PID,PPID,init has PID 1,{Running,sleeping,stopped,zombie}
• ps : -e(list all processes),-p <PID>(shows info of pid),aux(of all users,user-oriented format,list the processes without a controlling terminal-started on boot time and running in the background)
• pkill : -s(signal){default is SIGTERM},-f(matches against the full command line of the processes, not just the process name),-P PID(targets child processes of the specified parent PID)
• sudo : Asks for the current users password not the roots : if you cant do that you get suhas not in sudoers file : Entered password is cached for 15 mins wont ask till then
• su : asks for password of the target user : -p(preserve env - like preserve env variables {like -E in sudo})
• sudo -l : shows what are all the commands that this user can run
• r(4),w(2),x(1) {no permission is 0} : dir must have x perm to open : user(u),group(g),others(o) | all(a)
• chmod 641 hello.cpp : yk what it does : Only root, the file owner or user with sudo privileges can change the permissions of a file
• chmod -R 700 dirname : Trecursively set perm to all items in folder named dirname
• chmod g=r filename : sets group perm to r if nothing after = chmod removes all the perms
• chmod a-x filename : removes x perm from a ie all classes
• Sequential commands : Commands separated by a ; execute sequentially, regardless of whether the previous command succeeded or failed.
			If the commands are seperated by && the second command executes only if the first command succeeds
			Placing & after a command runs it in the background, meaning the shell does not wait till finishishing before moving on to the next command or returning control to you.

-------------------------------------REGEX-------------------------------------

• \b matches any character that is not a letter or number without including itself in the match.
• \s matches any whitespace any number of times
• \w means "any word character" (letters, numbers, regardless of case plus underscore)
• Metachars
 	"^"  beginning of a line (Can also mean “not” if inside [])
 	"$" end of line
 	"."  match any single character
 	"\" escape a special character
 	"|" or operation i.e. match a particular character set on either side
• Quantifiers: specifying the number of occurrences of a character
 	"*" Match the preceding item zero or more times
 	"?" Match the preceding item zero or one time
 	"+" Match the preceding item one or more times
 	"{n}" Match the preceding item exactly n times
 	"{n,}" Match the preceding item at least n times
 	"{,m}" Match the preceding item at most m times
 	"{n,m}" Match the preceding item from n to m times
• () - groups patterns together
  {} - match a particular number of occurrences (seen before)
  [] - match any character from a range of characters– ab[xyz]c matches "abxc" and  "abyc" and "abzc"
  [^...] matches a character which is not defined in the square bracket
  [a-z]  matches letters of a small case from a to z

-------------------------------------HTML-------------------------------------

• HTML tags are not case sensitive
• some HTML elements need not have content or closing tag. Ex:- <br>
• <b>,<i>,<sub>,<sup>
• Ordered list is created with  <ol> element, unordered list is created with <ul> element. In both cases each item is placed between <li> and </li>
• Definition list is created with <dl> element, pairs of <dt> and <dd> elements are used {<dt> contains the term being defined, <dd> contains the definition}
• Use the <a> element to define a link {<a href="./myname.html" target="_blank">My name</a>}
• href="#section1"-takes you to the element in same page with id as section1, href="mailto:suhasalladaboina@iitb.a.in"-opens your default mail app with send filled
• <pre> for pre formatted text ie if you put 2 spaces you see 2 spaces
• <img src="image.jpg" alt="Description of the image" align="right">
• <table border = "1"> - <theah> - <tr> - <th>
			 <tbody> - <tr> - <td rowspan/colspan = "2">           {{table header(<th>), table data(<td>)}}
• inline elements - <span>, <a>, <b>, <em>, <img>
  block level element - <div>, <h1>, <p>, <ul>, <li>
• <form>
	action = "https//:....." {tells where the info should go}
	method = "GET" OR "POST" 
	<input> - type = "text"{one line text box} / "number"{you get a step incrementor} / "password"{hides chars} / "email"{doesn't let you submit non emails}
			 "radio"{allow to pick one of a number of options, grouped together by name attribute, <input type="radio" id="html" name="fav_language" value="cpp">
				 the value HTML is what gets sent to server it is not shown in the page for you to set the thing you want to see beside button you give it a label
				 <label for="html">c++</label> gives the label c++ to the option
			 "checkbox" {select one or more options, name is the key and value is the value that gets sent to server}
			 	     for radio and checkbox - checked attribute means the option will be selected as default when page loads
			 "file" {Creates a box that looks like a text input followed by a browse button, ,method has to be post, accept = ".pdf,.csv" / "application/pdf, image/jpeg"
			 "hidden" {used to include data that is not visible or modifiable by the user the resulting POST will carry the name:value pair automatically}
		- name = "name" / "email" / whatever you want {pairing user input with the corresponding keys in the data sent to the server}
		- value = "smth" {that smth gets written in the input box already you can change it while filling but it is default}
	<input type="submit" name="submit" value="Login" {creates a submit button with login written on it}
	<input type="image" src="login.jpeg" alt="Submit" width="50">
	<textarea name="comments" rows="4" cols="50" placeholder="Write your comments here..."></textarea> {not reco to use rows and cols to specify size use css, and thing inside tags is 													default value for the text box user can change it but that is what you see when page loads
	<button> {element can contain various content such as text, images, or other HTML elements so more flexible than input type button}
		 type = "submit" - default for button in a form
			"reset" - resets the form
			"button" - you put onclick = smth for it to do smth custom
	<label for="button">Click this Button</label> {the for is the id for which you want to label it}
	<select> {create drop-down or list box, Contains two or more <option> elements, name attribute is the name to be sent along with value selected, selected attribute can be used to 			  indicate the option that should be selected when the page loads, value of the value attribute is what gets sent to server}
		  <select name="fruits">
       		  	<option value="apple">Apple</option>
       			<option value="cherry" selected>Cherry</option>
   		  </select>
• <link rel="shortcut icon" href="logo.png" type="image/x-icon">

-------------------------------------CSS-------------------------------------

• <link rel= "stylesheet" href= "linking-styles.css">
• In css file you can @import url("https//:blah_blah") (or) @import url("./css/cd.css") (or) @import "./styles.css"
• @import url() and @import are exactly same
• An ID selector is prefixed with a hash "#"
• An class selector is prefixed with a dot "."
• An universal selector is prefixed with a star "*"
• color - Name (or) hexadecimal 6 digit number (or) RGB values
• font-size - px (or) em {width of a letter m} (or) % {wrt to parent elements size}


-------------------------------------JS-------------------------------------

• <script src="https://www.w3schools.com/js/myScript.js"></script>
• <script src="/js/myScript.js"></script>
• document.getElementById("exampleForm").addEventListener("submit", (event) => {...})
• window.onload = function () {} [and] window.onload = function () {} - these ensure that the script only runs after the entire page has been loaded html, css, images, etc
• Functions and how they are defined in all ways

function gree(name,age) {
	return name+age;
}

var person = {
    firstName: "",
    lastName: "",
    age: 0,
    fullName: function() {
        return this.firstName + " " + this.lastName; // Using "this" keyword
    },
    incrementAge: function() {
        this.age++; // Incrementing age using "this"
    }
};

class Person {
    constructor(firstName, lastName, age) {
        this.firstName = firstName; // Instance variable
        this.lastName = lastName;   // Instance variable
        this._age = age;            // _age is used for the getter/setter
    }

    get age() {
        return this._age;
    }

    set age(newAge) {
        if (newAge < 0) {
           document.getElementById('output').innerHTML += "<p>Age cannot be negative!</p>";
        } else {
           this._age = newAge;
        }
    }

    fullName() {
        return `${this.firstName} ${this.lastName}`;
    }

    static greet() {
        document.getElementById('output').innerHTML += "<p>Hello from the Person class!</p>";
    }
}

• Arrays : .length(),.push(),.pop(),.sort(),.reverse()
• Objects : contain other objects, have properties and methods in them, not like a class cant use the template again later, example given above, can access the details outside 
• try, catch : throw "too many arguments";  ,  catch(err) {err.message has the string of the error}
• Classes : Shown above
• for (let i = 0; i < numbers.length; i++) {}
• for (let x in fruits) {} - x takes the string "1" to the length of fruits
• String s = "123";int n = Integer.parseInt(s);
• Events : click, dblclick, mouseover, mouseout {for buttons}
	   keydown, keyup, focus, blur, input {for inputfeilds}
	   submit{for form}
	   change{for select tag in html}
	   resize, scroll {for window}
• regex : /we[0-9]/  {
• Dayatypes : String, Number, Bigint, Boolean, Undefined, Null, Symbol, Object
	return !isNaN(num);
	isInteger(vale);
	Number(string); returns number if it is numberable and returns NaN if it is non numberable
	String(anything); returns a string
	toString(anything) ; makes it into string
	typeof(vale);
	When adding a number and a string, JavaScript will treat the number as a string
	Any variable can be emptied, by setting the value to undefined, the type will also be undefined
	let y = "5";let x = + y; - now x is a number
	Empty string to a numner or null to a number makes it zero
	Zero number to bool is false and "0" to bool is true

-------------------------------------GIT-------------------------------------

• 
















